---
- hosts: gabriel
  connection: ssh
  remote_user: root

  tasks:
    - name: Abort if the host is not booted from the Arch install media
      ansible.builtin.fail:
        msg: "This host is not booted from the Arch install media!"
      when: ansible_nodename != 'gabriel'

    # - name: Synchronize clock via NTP
    #   ansible.builtin.command: timedatectl set-ntp true

    - name: Repartition install drive
      block:
        - name: Wipe install drive and all its partitions
          ansible.builtin.command: wipefs --force --all  "{{ install_drive }}"

        - name: Create EFI partition
          community.general.parted:
            device: '{{ install_drive }}'
            label: gpt
            number: 1
            part_end: 512MB
            name: boot
            flags: [esp]
            state: present

        - name: Create root partition
          parted:
            device: '{{ install_drive }}'
            label: gpt
            number: 2
            part_start: 512MB
            name: root
            # flags: [lvm]
            state: present

    - name: Setup LUKS encryption key
      ansible.builtin.copy:
        src: '{{ luks_keyfile }}'
        dest: /root/keyfile

    - name: Setup LUKS encryption for root filesystem
      block:
        - name: Destroy existing LUKS volume
          community.crypto.luks_device:
            device: '{{ install_drive }}{{ root_partition_suffix }}'
            state: absent
        - name: Create and open LUKS volume
          community.crypto.luks_device:
            device: '{{ install_drive }}{{ root_partition_suffix }}'
            keyfile: /root/keyfile
            name: root
            state: opened

    - name: Create filesystems
      block:
        - name: Create FAT32 filesystem in boot partition
          ansible.builtin.filesystem:
            dev: '{{ install_drive }}{{ boot_partition_suffix }}'
            fstype: vfat
            opts: -F32
            force: yes
        - name: Create filesystem in root volume
          ansible.builtin.filesystem:
            dev: /dev/mapper/root
            fstype: '{{ root_filesystem }}'
            force: yes

    - name: Mount filesystems
      block:
        - name: Mount root filesystem
          ansible.builtin.mount:
            path: /mnt
            src: /dev/mapper/root
            fstype: '{{ root_filesystem }}'
            state: mounted
        - name: Create mountpoint for boot volume
          ansible.builtin.file:
            path: /mnt/boot
            state: directory
        - name: Mount boot filesystem
          ansible.builtin.mount:
            path: /mnt/boot
            src: '{{ install_drive }}{{ boot_partition_suffix }}'
            fstype: vfat
            state: mounted

    - name: Rank Arch mirrors
      block:
        - name: Install the reflector package (for rankmirrors)
          community.general.pacman:
            name:
              - reflector
            update_cache: yes
        - name: filter the fastest mirrors that support HTTPS
          ansible.builtin.shell: reflector --verbose --latest 10 --sort rate | awk -e '! /rsync/ {print}' > /etc/pacman.d/mirrorlist

    - name: Setup pacman keys
      ansible.builtin.command: pacman-key --init

    - name: Populate pacman keys
      ansible.builtin.command: pacman-key --populate

    - name: Run pacstrap
      ansible.builtin.command: pacstrap /mnt base btrfs-progs dhclient dhcpcd efibootmgr grub linux linux-firmware netctl openssh python sudo ansible git sshpass rsync vim wpa_supplicant

    - name: Generate fstab
      block:
        - name: Generate blank fstab
          ansible.builtin.command: genfstab -U /mnt >> /mnt/etc/fstab
        - name: Add root volume to fstab
          ansible.builtin.mount:
            fstab: /mnt/etc/fstab
            path: /
            src: /dev/mapper/root
            fstype: '{{ root_filesystem }}'
            opts: defaults
            passno: '0'
            state: present
        - name: Add boot volume to fstab
          ansible.builtin.mount:
            fstab: /mnt/etc/fstab
            path: /boot
            src: '{{ install_drive }}{{ boot_partition_suffix }}'
            fstype: vfat
            opts: defaults
            passno: '2'
            state: present

    - name: Set local timezone
      ansible.builtin.command: arch-chroot /mnt ln -sf /usr/share/zoneinfo/America/Los_Angeles /etc/localtime

    - name: Generate adjtime file
      ansible.builtin.command: arch-chroot /mnt hwclock --systohc

    - name: Setup locales
      block:
        - name: Configure locale.gen
          ansible.builtin.lineinfile:
            dest: /mnt/etc/locale.gen
            regexp: '{{ item.regex }}'
            line: '{{ item.line }}'
          loop:
            - {regex: en_US\.UTF-8 UTF-8, line: en_US.UTF-8 UTF-8}
            - {regex: en_US ISO-8859-1, line: en_US ISO-8859-1}
        - name: Create locale.conf
          ansible.builtin.copy:
            content: "LANG=en_US.UTF-8"
            dest: /mnt/etc/locale.conf
        - name: Generate locales
          ansible.builtin.command: arch-chroot /mnt locale-gen

    - name: Set hostname
      ansible.builtin.copy:
        content: '{{ aa_host }}'
        dest: /mnt/etc/hostname

    - name: Enable sshd
      ansible.builtin.command: arch-chroot /mnt systemctl enable sshd

    - name: Set up initramfs
      block:
        - name: Add vconsole.conf
          ansible.builtin.template:
            src: files/vconsole.conf.j2
            dest: /mnt/etc/vconsole.conf
            owner: root
            group: root
            mode: 0644

        - name: Add mkinitcpio.conf hooks
          ansible.builtin.lineinfile:
            dest: /mnt/etc/mkinitcpio.conf
            regexp: ^HOOKS=
            line: HOOKS=(base udev systemd keyboard keymap sd-vconsole block sd-encrypt autodetect modconf filesystems fsck)
        - name: Create new initramfs
          ansible.builtin.command: arch-chroot /mnt mkinitcpio -p linux

    - name: Set up systemd-boot
      block:

        - name: Create directory for EFI configuration files
          ansible.builtin.file:
            path: /mnt/boot/loader/entries
            state: directory

        - name: Get UUID for root LUKS volume
          ansible.builtin.command: blkid -s UUID -o value '{{ install_drive }}{{ root_partition_suffix }}'
          register: root_luks_uuid
          changed_when: false

        - name: Print return information from the previous task
          ansible.builtin.debug:
            var: root_luks_uuid
            verbosity: 2

        - name: Add commandline information to EFI config
          ansible.builtin.template:
            src: files/arch-luks.conf.j2
            dest: /mnt/boot/loader/entries/arch.conf
            owner: root
            group: root
            mode: 0644

        - name: Add loader config
          ansible.builtin.template:
            src: files/loader.conf.j2
            dest: /mnt/boot/loader/loader.conf
            owner: root
            group: root
            mode: 0644
      vars:
        root_dev: /dev/mapper/root

    - name: Initialize systemd-boot
      block:
        - name: Update systemd-boot
          ansible.builtin.command: arch-chroot /mnt bootctl --path=/boot install

    - name: Setup user account
      block:
        - name: Create user account
          ansible.builtin.command:
            argv:
              - arch-chroot
              - /mnt
              - useradd
              - --create-home
              - --user-group
              - --groups
              - wheel
              - "{{ user_name }}"
              - --password
              - "$6$ZE1BMAFT8ZDT7aTV$fUc4cWfabmbD7lUSg6R5QmV3R/qxQHS18kyQFiDfJmksSP4winHAoZCoE7GEGo4YD9lgk.OnzqjorvnlDjuYT0"
              - --expiredate
              - 1980-01-01
              - --inactive
              - 0

        - name: Create user's ssh directory
          ansible.builtin.file:
            path: /mnt/home/{{ user_name }}/.ssh
            state: directory
        - name: Set mode, owner, and group on user's ssh directory
          ansible.builtin.command: arch-chroot /mnt {{ item }}
          loop:
            - chmod 0700 /home/{{ user_name }}/.ssh
            - chown {{ user_name }}:{{ user_name }} /home/{{ user_name }}/.ssh
        - name: Copy over ssh keys from current Ansible controller as an authorized key
          ansible.builtin.copy:
            src: '{{ lookup("env", "HOME") }}/.ssh/'
            dest: '/mnt/home/{{ user_name }}/.ssh/'
        - name: Set mode, owner, and group on user's authorized_key file
          ansible.builtin.command: arch-chroot /mnt {{ item }}
          loop:
            - chmod 0600 /home/{{ user_name }}/.ssh/authorized_keys
            - chown {{ user_name }}:{{ user_name }} /home/{{ user_name }}/.ssh/authorized_keys

    - name: Give passwordless sudo access to wheel group
      ansible.builtin.copy:
        content: '%wheel ALL=(ALL) NOPASSWD: ALL'
        dest: /mnt/etc/sudoers.d/wheel
        validate: /usr/sbin/visudo --check --file=%s

    - name: Reboot
      ansible.builtin.command: /sbin/shutdown -r +1
      async: 0
      poll: 0
      ignore_errors: true
