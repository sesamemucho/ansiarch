:PROPERTIES:
:ID:       e1cfba58-4a56-499f-a385-88050eab431c
:END:
#+title: ansible-archlinux
#+filetags: :project:

* Project name: ansiarch

ansible-archlinux

* Todo

 - [X] Get load step to work with RPi
 - [X] ssh with ansible key
 - [X] override ansible host IP address with ...155.42
 - [X] pacman update
 - [X] Add user
 - [X] Set up hard drive if attached
 - [ ] Test from img install
 - [ ] Make it work without having to have primary IP addr in
   inventory file.
 - [ ] Make var with partitions and mount points, size, etc. for data disk(s)
 - [ ] Make "make help"

** systemctl enable --now systemd-resolver

** WTF - I seemed to have stopped halfway through separating efi from bios pre-load


* Image files
http://ca.us.mirror.archlinuxarm.org/os/ArchLinuxARM-aarch64-latest.tar.gz

* Flow

Start with name

Find active IP address
use ansible.netcommon.net_ping
All we need to do is to get and then use the address - no need for conditionals

x86 or RPi - identify from host vars

wired: 155.42
wireless: 155.43

Run first stage load

wait for reboot, then look for the host's address (wired or wireless)

Run second stage load

* Design thoughts

** Current thoughts
[2023-02-13 Mon]
To bring things up from the very beginning - that is, before the arcot
DHCP server is available, whatever DHCP server is running should
recognize 'gabriel' and 'uriel'.
`gabriel` is the name of the initial archiso hostname (the changing
trickster). Every new machine starts out with this name. The other is
'uriel', the arcot DHCP server.





** Keep the install command simple
What I'd like to be able to do is to boot up a machine with a
customized archiso, and then run something like "do install
<hostname>", and then have ansible configure the machine according to
<hostname>.

For this to happen, we would need to identify the archiso machine
somehow. I will allow the constraint of only one archiso machine on
the network at a time. The first idea that occurs is to give the
archiso machine a special IP address. I'm doing this currently by
using systemd.networkd (in /etc/systemd/network/) to give these
special addresses (one for wireless, another for wired (not sure why
two address atm)). However, I would also like this to work with an
archiso image running on QEMU. There is a 'run_archiso' script from
Arch Linux that runs archiso on QEMU. It doesn't provide for
customizing the networking, and I'd like to avoid maintaining special
versions of provided scripts. Also, the systemd.networking step
(assigning a special address) interferes with the QEMU way, which
relies on DHCP.

So, next try:

Have a DHCP server return the magic IP address for hostname
"archiso". This should work for QEMU (as it won't get out to the
network's DHCP server), and for the other uses.

Use a host_var name of 'qemu', and set the ssh address to 127.0.0.1,
port 60022 for the QEMU VM.
Use ssh address of host_var name for other machines.

It will require that the first install be the DHCP server, though. For
me, the DHCP server will be a Raspberry Pi, and can be initialized
with the correct address.

What about other VMs?

a. This process should work for general VMs, with an extra step for
creating/installing the image to a VM.

b. Most of my VMs will probably be something other than Arch Linux,
for work practice.

c. Most of the work will be in containers rather than VMs.

** Network transitioning from initial image to configured machine

*** Raspberry Pi
Initial image has a host name of 'gabriel' (the changing
trickster). It will come up and have an address assigned via DHCP on
its active NIC. The YAML file for the new host will have a structure
named 'ipa' which identifies each NIC, and says if the connection is
wired or wireless, DHCP or static, and if static, what the last two
octets are.

Ansible facts will tell us what NIC gabriel is using, and whether it
is a wired or wireless connection. The task for the 'trans_rpi' role
will disable/stop the default configuration for this NIC and
enable/start the new configuration for this NIC. It will then wait for
the RPi to reconnect. After that, it will disable and stop the other
default NICs and enable the new NIC configurations. We do it this way
so as to guarantee that we can re-connect with the RPi.
Note:
https://medium.com/opsops/ansible-default-ipv4-is-not-what-you-think-edb8ab154b10
"It is the IP address which resides on interface where the default
route points to."




* Docuentation:

Be chatty about jinja2 filters.
Where did aur_builder stuff come from?

* Notes:

** Things to know:

*** Ansible SSH key
The key 'ansible_ssh_private_key_file' (defined in group_vars/all.yml)
is used for ssh-ing into the hosts, and should exist before a playbook
is run.

** Dependencies
Per Jeff Geerling, using a local ansible.cfg and storing the project
dependencies locally.

Currently, dependencies are:
  ansible.netcommon - for ping capability, to see what address is
  online
  ansible.utils - dependency of ansible.netcommon

To download dependencies, use
  make gen

host dependencies:
make
jq
python
ansible
mktemp

** Raspberry Pi

There is a script (roles/load_rpi/files/setup.sh) to prepare the
system to be controlled by ansible. This is configured to run once, at
the first boot. This will take several minutes to run. To watch its
progress, log into the rpi as root, and run the command 
  'journalctl -f -t setup.sh'

** Files

*** inventory.yml
The primary inventory file for this project. It defines the 

