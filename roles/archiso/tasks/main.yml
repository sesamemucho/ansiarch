---
- name: Ensure mkarchiso profile directory is not there
  ansible.builtin.file:
    path: "{{ archiso_profile_dir }}"
    state: absent

- name: Ensure mkarchiso working directory is not there
  ansible.builtin.file:
    path: "{{ archiso_working_dir }}"
    state: absent

- name: Copy releng archiso profile to work directory
  ansible.builtin.copy:
    src: /usr/share/archiso/configs/releng/
    dest: "{{ archiso_profile_dir }}"

- name: Ensure iwd directory exists
  ansible.builtin.file:
    path: "{{ archiso_profile_dir }}/airootfs/var/lib/iwd"
    state: directory

- name: Add iwd file
  ansible.builtin.template:
    src: iwd.j2
    dest: "{{ archiso_profile_dir }}/airootfs/var/lib/iwd/{{ wireless_ssid }}.psk"

- name: Ensure .ssh directory exists
  ansible.builtin.file:
    path: "{{ archiso_profile_dir }}/airootfs/root/.ssh"
    state: directory

- name: Copy ssh key file to root
  ansible.builtin.copy:
    src: "{{ ssh_key_file }}.pub"
    dest: "{{ archiso_profile_dir }}/airootfs/root/.ssh/authorized_keys"

# From: https://wiki.archlinux.org/title/Archiso#Automatically_connect_to_a_Wi-Fi_network_using_iwd
- name: Set up correct permissions for iwd psk file and ssh files
  ansible.builtin.blockinfile:
    path: "{{ archiso_profile_dir }}/profiledef.sh"
    insertafter: '\[\"/root\"\]='
    block: |
      ["/var/lib/iwd"]="0:0:0700"
      ["/root/.ssh"]="0:0:0700"
      ["/root/.ssh/authorized_keys"]="0:0:0600"

# The file etc/systemd/system/multi-user.target.wants/systemd-networkd.service
# must be a link (?) for multi-user.target to make it go.
- name: Ensure file is not there
  ansible.builtin.file:
    path: "{{ archiso_profile_dir }}/airootfs/etc/systemd/system/multi-user.target.wants/systemd-networkd.service"
    state: absent

- name: Create a symbolic link for systemd-networkd
  ansible.builtin.file:
    src: /usr/lib/systemd/system/systemd-networkd.service
    dest: "{{ archiso_profile_dir }}/airootfs/etc/systemd/system/multi-user.target.wants/systemd-networkd.service"
    force: yes
    state: link

- name: Ensure sshd service file is not there
  ansible.builtin.file:
    path: "{{ archiso_profile_dir }}/airootfs/etc/systemd/system/multi-user.target.wants/sshd.service"
    state: absent

- name: Create a symbolic link for sshd.service
  ansible.builtin.file:
    src: /usr/lib/systemd/system/sshd.service
    dest: "{{ archiso_profile_dir }}/airootfs/etc/systemd/system/multi-user.target.wants/sshd.service"
    force: yes
    state: link

- name: Make the Arch ISO
  ansible.builtin.shell:
    cmd: mkarchiso -v -w "{{ archiso_working_dir }}" -o "{{ archiso_output_dir }}" "{{ archiso_profile_dir }}"
