---
- name: Include the x86_64 roles
  include_tasks:
    file: pre_load_x86_64.yml
  when: "ansible_architecture == 'x86_64'"

# The preload function on Raspberry Pi is done by the /root/setup.sh script.
# - name: Set hostname
#   copy:
#     content: '{{ my_host }}'
#     dest: /mnt/etc/hostname

# - name: Copy netctl DHCP config
#   ansible.builtin.template:
#     src: "{{ item.value['type'] }}-config.j2"
#     dest: "/etc/netctl/{{ item.key }}"
#   loop: "{{ niclist }}"
#   when: item.value['style'] == "dhcp"

# - name: Copy netctl static config
#   ansible.builtin.template:
#     src: "{{ item.value['type'] }}-static-config.j2"
#     dest: "/etc/netctl/{{ item.key }}"
#   loop: "{{ niclist }}"
#   when: item.value['style'] == "static"

# - name: Setup netctl
#   block:
#     - name: Create netctl profile for wired connection
#       copy:
#         content: |
#           Description='Wired with DHCP'
#           Interface={{ wired_interface }}
#           Connection=ethernet
#           IP=dhcp
#           IP6=dhcp-noaddr
#           # IPv6 traffic is tunneled over IPv4, which eats 20 bytes of the MTU.
#           ExecUpPost='/usr/bin/ip link set {{ wired_interface }} mtu 1480'
#         dest: /mnt/etc/netctl/wired

#     - name: Enable wired netctl profile
#       command: arch-chroot /mnt netctl enable wired

# - name: Setup netctl wireless
#   block:
#     - name: Create netctl profile for wireless connection
#       copy:
#         content: |
#           Description='Wireless with DHCP'
#           Interface={{ wireless_interface }}
#           Connection=wireless
#           IP=dhcp
#           Security=wpa
#           ESSID='{{ wireless_ssid }}'
#           Key='{{ wireless_key }}'
#         dest: /mnt/etc/netctl/wireless

#     - name: Enable wireless netctl profile
#       command: arch-chroot /mnt netctl enable wireless

#   when: use_wireless

# - name: Enable sshd
#   command: arch-chroot /mnt systemctl enable sshd

# - name: Set up initramfs
#   block:
#     - name: Add vconsole.conf
#       ansible.builtin.template:
#         src: files/vconsole.conf.j2
#         dest: /mnt/etc/vconsole.conf
#         owner: root
#         group: root
#         mode: 0644

#     - name: Add mkinitcpio.conf hooks
#       lineinfile:
#         dest: /mnt/etc/mkinitcpio.conf
#         regexp: ^HOOKS=
#         line: HOOKS=(base systemd modconf block keyboard sd-vconsole autodetect sd-encrypt filesystems fsck)
#       notify:
#         - Update mkinitcpio

# - name: Setup boot
#   import_tasks: boot.yml

# - name: Setup user account
#   block:
#     - name: Create user account
#       command: arch-chroot /mnt useradd --create-home --user-group --groups wheel {{ user_name }} 
#     - name: Set user's password
#       ansible.builtin.shell:
#         cmd: echo '{{ user_name }}:password' | arch-chroot /mnt chpasswd
#     - name: Expire user's password
#       ansible.builtin.command:
#         arch-chroot /mnt passwd -e {{ user_name }}
#     - name: Create user's ssh directory
#       file:
#         path: /mnt/home/{{ user_name }}/.ssh
#         state: directory
#     - name: Set mode, owner, and group on user's ssh directory
#       command: arch-chroot /mnt {{ item }}
#       loop:
#         - chmod 0700 /home/{{ user_name }}/.ssh
#         - chown {{ user_name }}:{{ user_name }} /home/{{ user_name }}/.ssh
#     - name: Copy over ssh keys from current Ansible controller as an authorized key
#       copy:
#         src: '{{ lookup("env", "HOME") }}/.ssh/'
#         dest: '/mnt/home/{{ user_name }}/.ssh/'
#     - name: Set mode, owner, and group on user's authorized_key file
#       command: arch-chroot /mnt {{ item }}
#       loop:
#         - chmod 0600 /home/{{ user_name }}/.ssh/authorized_keys
#         - chown {{ user_name }}:{{ user_name }} /home/{{ user_name }}/.ssh/authorized_keys

# - name: Give passwordless sudo access to wheel group
#   copy:
#     content: '%wheel ALL=(ALL) NOPASSWD: ALL'
#     dest: /mnt/etc/sudoers.d/wheel
#     validate: /usr/sbin/visudo --check --file=%s

# - name: Print the value
#   shell: |
#     /usr/bin/getent hosts gabriel | /usr/bin/awk '{print $1}' 
#   register: connected_ip
#   delegate_to: localhost

# - name: set fact
#   set_fact:
#     conn_ip: "{{ connected_ip.stdout }}"

# - name: More see 0
#   ansible.builtin.debug:
#     msg: "gabriel: conn_ip is {{ conn_ip }} For interface {{ item }}:  {{ hostvars['gabriel']['ansible_' + item] }}"
#   loop: "{{ ansible_interfaces }}"

# - name: More see
#   ansible.builtin.debug:
#     msg: "gabriel: Found interface {{ item }}: {{ hostvars['gabriel']['ansible_' + item] }}"
#   loop: "{{ ansible_interfaces }}"
#   # Which interface on gabriel has the address at which the ansible host has connected?
#   when: hostvars['gabriel']['ansible_' + item]['active'] and (hostvars['gabriel']['ansible_' + item]['ipv4']['address'] == conn_ip)

# - name: Set connected interface, type, and style
#   ansible.builtin.set_fact:
#     conn_interface: "{{ item }}"
#     conn_type: "{{ hostvars[my_host]['ipa'][item]['type'] }}"
#     conn_style: "{{ hostvars[my_host]['ipa'][item]['style'] }}"
#   loop: "{{ ansible_interfaces }}"
#   # Which interface on gabriel has the address at which the ansible host has connected?
#   when: hostvars['gabriel']['ansible_' + item]['active'] and (hostvars['gabriel']['ansible_' + item]['ipv4']['address'] == conn_ip)

# - name: Start current NIC
#   ansible.builtin.shell: |
#     /usr/bin/netctl stop "{{ conn_type }}"
#     /usr/bin/netctl disable "{{ conn_type }}"
#     /usr/bin/netctl enable "{{ conn_interface }}"
#     /usr/bin/netctl start "{{ conn_interface }}"
#   async: 100
#   poll: 0

# - name: Show name
#   ansible.builtin.debug:
#     msg: 'my_host is: {{ my_host }} domain is {{ domain }} conn_style is {{ conn_style }}'

# - name: Set hostname
#   ansible.builtin.hostname:
#     name: "{{ my_host }}.{{ domain }}"
#     use: systemd

# - name: Change ansible name for this host
#   ansible.builtin.set_fact:
#     ansible_ssh_host: "{{ my_host }}"
#   when: my_host != "uriel"

# - name: Change ansible IP address for this host
#   ansible.builtin.set_fact:
#     ansible_ssh_host: "{{ ip_start }}.{{ hostvars[my_host]['ipa'][conn_interface]['ip'] }}"
#   when: conn_style == 'static'

# - name: Wait for host to come back
#   local_action:
#     module: ansible.builtin.wait_for_connection
#     delay: 30
#     timeout: 180

# - name: Start secondary networks
#   ansible.builtin.shell: |
#     /usr/bin/netctl stop "{{ item.value['type'] }}"
#     /usr/bin/netctl disable "{{ item.value['type'] }}"
#     /usr/bin/netctl enable "{{ item.key }}"
#     /usr/bin/netctl start "{{ item.key }}"
#   async: 100
#   poll: 0
#   loop: "{{ niclist }}"
#   when: item != conn_interface
