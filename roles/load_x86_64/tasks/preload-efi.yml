---
- name: Abort if the host is not booted from the Arch install media
  ansible.builtin.fail:
    msg: "This host is not booted from the Arch install media!"
  when: ansible_nodename != 'gabriel'

# - name: Synchronize clock via NTP
#   ansible.builtin.command: timedatectl set-ntp true
# - name: Set up for luks
#   ansible.builtin.set_fact:
#     root_dev: /dev/mapper/root
#   when: use_luks

# - name: Set up for not luks
#   ansible.builtin.set_fact:
#     root_dev: '{{ install_drive }}{{ root_partition_suffix }}'
#   when: not use_luks

- name: Get device upon which Arch will be installed
  ansible.builtin.set_fact:
    install_dev: "{{ my_host_vars['install_disks'].keys()|first }}"

- name: dbg1
  ansible.builtin.debug:
    msg: "boot fstype: {{ my_host_vars['install_disks'][install_dev].boot.fstype }}"

- name: Run setup_disk
  ansible.builtin.include_role:
    name:  setup_disk
  vars:
    disk_category: 'install_disks'

- name: Set up convenient root_info
  ansible.builtin.set_fact:
    root_info: "{{ my_host_vars['install_disks'][install_dev].root }}"

- name: Set up convenient facts
  ansible.builtin.set_fact:
    root_filesystem: "{{ root_info.fstype }}"
    root_dev: "{{ have_root_luks|ternary('/dev/mapper/root', install_dev ~ root_info.suffix) }}"

- name: dbg root
  ansible.builtin.debug:
    msg: "root_fs: {{ root_filesystem }}   root_dev: {{ root_dev }}"

# - name: Bye
#   meta: end_play

- name: Mount root filesystem
  ansible.posix.mount:
    path: /mnt
    src: "{{ root_dev }}"
    state: mounted
    fstype: "{{ root_filesystem }}"

- name: Create mountpoint for boot volume
  ansible.builtin.file:
    path: /mnt/boot
    state: directory

- name: Mount boot filesystem
  ansible.posix.mount:
    path: /mnt/boot
    src: '{{ boot_partition_name }}'
    fstype: "{{ my_host_vars['install_disks'][install_dev].boot.fstype }}"
    state: mounted

- name: Rank Arch mirrors
  block:
    - name: Install the reflector package (for rankmirrors)
      community.general.pacman:
        name:
          - reflector
        update_cache: yes
    - name: filter the fastest mirrors that support HTTPS
      ansible.builtin.shell: reflector --verbose --latest 10 --sort rate | awk -e '! /rsync/ {print}' > /etc/pacman.d/mirrorlist

- name: Setup pacman keys
  ansible.builtin.command: pacman-key --init

- name: Populate pacman keys
  ansible.builtin.command: pacman-key --populate

- name: Run pacstrap
  ansible.builtin.command: pacstrap /mnt base btrfs-progs dhclient dhcpcd efibootmgr grub linux linux-firmware netctl openssh parted python sudo systemd-resolvconf ansible git sshpass rsync vim wpa_supplicant

- name: Generate fstab
  block:
    - name: Generate blank fstab
      ansible.builtin.command: genfstab -U /mnt >> /mnt/etc/fstab
    - name: Add root volume to fstab
      ansible.posix.mount:
        fstab: /mnt/etc/fstab
        path: /
        src: '{{ root_dev }}'
        fstype: '{{ root_filesystem }}'
        opts: defaults
        passno: '0'
        state: present
    # - name: Add boot volume to fstab
    #   ansible.posix.mount:
    #     fstab: /mnt/etc/fstab
    #     path: /boot
    #     src: '{{ install_drive }}{{ boot_partition_suffix }}'
    #     fstype: vfat
    #     opts: defaults
    #     passno: '2'
    #     state: present

- name: Set local timezone
  ansible.builtin.command: arch-chroot /mnt ln -sf /usr/share/zoneinfo/America/Los_Angeles /etc/localtime

- name: Generate adjtime file
  ansible.builtin.command: arch-chroot /mnt hwclock --systohc

- name: Setup locales
  block:
    - name: Configure locale.gen
      ansible.builtin.lineinfile:
        dest: /mnt/etc/locale.gen
        regexp: '{{ item.regex }}'
        line: '{{ item.line }}'
      loop:
        - {regex: en_US\.UTF-8 UTF-8, line: en_US.UTF-8 UTF-8}
        - {regex: en_US ISO-8859-1, line: en_US ISO-8859-1}
    - name: Create locale.conf
      ansible.builtin.copy:
        content: "LANG=en_US.UTF-8"
        dest: /mnt/etc/locale.conf
    - name: Generate locales
      ansible.builtin.command: arch-chroot /mnt locale-gen

- name: Set hostname
  ansible.builtin.copy:
    content: '{{ aa_host }}'
    dest: /mnt/etc/hostname

- name: Enable sshd
  ansible.builtin.command: arch-chroot /mnt systemctl enable sshd

# We are sending the local hostname to the DHCP server, and not
# requesting one from it
- name: Don't request hostname from DHCP server
  ansible.builtin.lineinfile:
    path: /mnt/etc/dhcpcd.conf
    regexp: '^option host_name'
    line: '#option host_name'

- name: Send hostname to DHCP server
  ansible.builtin.lineinfile:
    path: /mnt/etc/dhcpcd.conf
    regexp: '^#hostname'
    line: 'hostname'

- name: Set up initramfs
  block:
    - name: Add vconsole.conf
      ansible.builtin.copy:
        src: vconsole.conf
        dest: /mnt/etc/vconsole.conf
        owner: root
        group: root
        mode: 0644

    - name: Add mkinitcpio.conf hooks
      ansible.builtin.lineinfile:
        dest: /mnt/etc/mkinitcpio.conf
        regexp: ^HOOKS=
        line: HOOKS=(base udev systemd keyboard keymap sd-vconsole block sd-encrypt autodetect modconf filesystems fsck)

    - name: Create new initramfs
      ansible.builtin.command: arch-chroot /mnt mkinitcpio -p linux

- name: Create directory for EFI configuration files
  ansible.builtin.file:
    path: /mnt/boot/loader/entries
    state: directory

- name: Set up systemd-boot for luks
  block:

    - name: Get UUID for root LUKS volume
      ansible.builtin.command: blkid -s UUID -o value '{{ install_drive }}{{ root_partition_suffix }}'
      register: root_luks_uuid
      changed_when: false

    - name: Print return information from the previous task
      ansible.builtin.debug:
        var: root_luks_uuid
        verbosity: 2

    - name: Add commandline information to EFI config
      ansible.builtin.template:
        src: arch-luks.conf.j2
        dest: /mnt/boot/loader/entries/arch.conf
        owner: root
        group: root
        mode: 0644
  when: have_root_luks

- name: Set up systemd-boot for non-luks
  block:
    - name: Add commandline information to EFI config
      ansible.builtin.template:
        src: arch.conf.j2
        dest: /mnt/boot/loader/entries/arch.conf
        owner: root
        group: root
        mode: 0644
  when: not have_root_luks

- name: Create directory for EFI configuration files
  ansible.builtin.file:
    path: /mnt/boot/loader/entries
    state: directory

- name: Add loader config
  ansible.builtin.copy:
    src: loader.conf
    dest: /mnt/boot/loader/loader.conf
    owner: root
    group: root
    mode: 0644

- name: Fix permission on /boot
  ansible.builtin.file:
    path: /mnt/boot
    mode: 0600
    state: directory

- name: Initialize systemd-boot
  block:
    - name: Update systemd-boot
      ansible.builtin.command: arch-chroot /mnt bootctl --path=/boot install

- name: Setup user account
  block:
    - name: Create user group
      ansible.builtin.command:
        argv:
          - arch-chroot
          - /mnt
          - groupadd
          - --force
          - --gid
          - "{{ user_group_id }}"
          - "{{ user_group }}"

    - name: Create user account
      ansible.builtin.command:
        argv:
          - arch-chroot
          - /mnt
          - useradd
          - --create-home
          - --gid
          - "{{ user_group }}"
          - --uid
          - "{{ user_id }}"
          - --groups
          - wheel
          - "{{ user_name }}"
          - --password
          - "$6$ZE1BMAFT8ZDT7aTV$fUc4cWfabmbD7lUSg6R5QmV3R/qxQHS18kyQFiDfJmksSP4winHAoZCoE7GEGo4YD9lgk.OnzqjorvnlDjuYT0"

    - name: Expire password (require new password on first use)
      ansible.builtin.command: arch-chroot /mnt chage -d 0 "{{ user_name }}"

    - name: Create user's ssh directory
      ansible.builtin.file:
        path: /mnt/home/{{ user_name }}/.ssh
        state: directory
    - name: Set mode, owner, and group on user's ssh directory
      ansible.builtin.command: arch-chroot /mnt {{ item }}
      loop:
        - chmod 0700 /home/{{ user_name }}/.ssh
        - chown {{ user_name }}:{{ user_name }} /home/{{ user_name }}/.ssh
    - name: Copy over ssh keys from current Ansible controller as an authorized key
      ansible.builtin.copy:
        src: '{{ lookup("env", "HOME") }}/.ssh/'
        dest: '/mnt/home/{{ user_name }}/.ssh/'
    - name: Set mode, owner, and group on all user's .ssh files
      ansible.builtin.command: arch-chroot /mnt {{ item }}
      loop:
        - chmod 0600 /home/{{ user_name }}/.ssh/authorized_keys
        - chown -R {{ user_name }}:{{ user_name }} /home/{{ user_name }}/.ssh

- name: Give passwordless sudo access to wheel group
  ansible.builtin.copy:
    content: '%wheel ALL=(ALL) NOPASSWD: ALL'
    dest: /mnt/etc/sudoers.d/wheel
    validate: /usr/sbin/visudo --check --file=%s

- name: Handle networking
  ansible.builtin.include_role: 
    name: load_x86_64
    tasks_from: network

- name: Reboot
  ansible.builtin.command: /sbin/shutdown -r +1
  async: 0
  poll: 0
  ignore_errors: true
  when: not have_root_luks
