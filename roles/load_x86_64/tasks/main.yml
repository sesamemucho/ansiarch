---
- name: x86_64 preload stuff for BIOS
  include_tasks: preload-bios.yml
  when boottype == "bios"

- name: x86_64 preload stuff for EFI
  include_tasks: preload-efi.yml
  when boottype == "efi"

- name: Create user group
  ansible.builtin.group:
    name: "{{ user_name }}"

- name: Create user account
  ansible.builtin.user:
    name: "{{ user_name }}"
    # password is "password"
    password: "$6$ZE1BMAFT8ZDT7aTV$fUc4cWfabmbD7lUSg6R5QmV3R/qxQHS18kyQFiDfJmksSP4winHAoZCoE7GEGo4YD9lgk.OnzqjorvnlDjuYT0"
    group: "{{ user_name }}"
    groups: wheel
    append: yes
    create_home: yes
    update_password: on_create

- name: Expire user's password
  ansible.builtin.command:
    passwd -e {{ user_name }}

- name: Create user's ssh directory
  file:
    path: /home/{{ user_name }}/.ssh
    state: directory

- name: Set mode, owner, and group on user's ssh directory
  command: "{{ item }}"
  loop:
    - chmod 0700 /home/{{ user_name }}/.ssh
    - chown {{ user_name }}:{{ user_name }} /home/{{ user_name }}/.ssh

- name: Copy over ssh keys from current Ansible controller as an authorized key
  copy:
    src: '{{ lookup("env", "HOME") }}/.ssh/'
    dest: '/home/{{ user_name }}/.ssh/'

- name: Set mode, owner, and group on user's authorized_key file
  command: "{{ item }}"
  loop:
    - chmod 0600 /home/{{ user_name }}/.ssh/authorized_keys
    - chown {{ user_name }}:{{ user_name }} /home/{{ user_name }}/.ssh/authorized_keys

- name: Setup for pacman
  ansible.builtin.command: "{{ item }}"
  loop:
    - pacman-key --init
    - pacman-key --populate

- name: Update packages
  community.general.pacman:
    update_cache: true
    upgrade: true

- name: Install base-devel for AUR and other stuff
  community.general.pacman:
    name:
      - base-devel
    state: present

- name: Make AUR build user
  ansible.builtin.user:
    name: aur_builder
    create_home: yes
    group: wheel

- name: Set up remote_tmp dir
  ansible.builtin.file:
    path: /home/aur_builder/.ansible/tmp
    state: directory
    owner: aur_builder
    group: wheel
    mode: 0755

- name: sudo for aur_builder
  ansible.builtin.lineinfile:
    path: /etc/sudoers.d/11-install-aur-builder
    line: 'aur_builder ALL=(ALL) NOPASSWD: /usr/bin/pacman'
    create: yes
    validate: 'visudo -cf %s'

- name: AUR installs
  block:
    - name: get yay
      kewlfft.aur.aur:
        use: makepkg
        name: yay
      become: yes
      become_user: aur_builder

# - name: Print the value
#   shell: |
#     /usr/bin/getent hosts gabriel | /usr/bin/awk '{print $1}' 
#   register: connected_ip
#   delegate_to: localhost

# - name: set fact
#   set_fact:
#     conn_ip: "{{ connected_ip.stdout }}"

# - name: More see 0
#   ansible.builtin.debug:
#     msg: "gabriel: conn_ip is {{ conn_ip }} For interface {{ item }}:  {{ hostvars['gabriel']['ansible_' + item] }}"
#   loop: "{{ ansible_interfaces }}"

# - name: More see
#   ansible.builtin.debug:
#     msg: "gabriel: Found interface {{ item }}: {{ hostvars['gabriel']['ansible_' + item] }}"
#   loop: "{{ ansible_interfaces }}"
#   # Which interface on gabriel has the address at which the ansible host has connected?
#   when: hostvars['gabriel']['ansible_' + item]['active'] and (hostvars['gabriel']['ansible_' + item]['ipv4']['address'] == conn_ip)

# - name: Set connected interface, type, and style
#   ansible.builtin.set_fact:
#     conn_interface: "{{ item }}"
#     conn_type: "{{ hostvars[my_host]['ipa'][item]['type'] }}"
#     conn_style: "{{ hostvars[my_host]['ipa'][item]['style'] }}"
#   loop: "{{ ansible_interfaces }}"
#   # Which interface on gabriel has the address at which the ansible host has connected?
#   when: hostvars['gabriel']['ansible_' + item]['active'] and (hostvars['gabriel']['ansible_' + item]['ipv4']['address'] == conn_ip)

# - name: Start current NIC
#   ansible.builtin.shell: |
#     /usr/bin/netctl stop "{{ conn_type }}"
#     /usr/bin/netctl disable "{{ conn_type }}"
#     /usr/bin/netctl enable "{{ conn_interface }}"
#     /usr/bin/netctl start "{{ conn_interface }}"
#   async: 100
#   poll: 0

# - name: Show name
#   ansible.builtin.debug:
#     msg: 'my_host is: {{ my_host }} domain is {{ domain }} conn_style is {{ conn_style }}'

# - name: Set hostname
#   ansible.builtin.hostname:
#     name: "{{ my_host }}.{{ domain }}"
#     use: systemd

# - name: Change ansible name for this host
#   ansible.builtin.set_fact:
#     ansible_ssh_host: "{{ my_host }}"
#   when: my_host != "uriel"

# - name: Change ansible IP address for this host
#   ansible.builtin.set_fact:
#     ansible_ssh_host: "{{ ip_start }}.{{ hostvars[my_host]['ipa'][conn_interface]['ip'] }}"
#   when: conn_style == 'static'

# - name: Wait for host to come back
#   local_action:
#     module: ansible.builtin.wait_for_connection
#     delay: 30
#     timeout: 180

# - name: Start secondary networks
#   ansible.builtin.shell: |
#     /usr/bin/netctl stop "{{ item.value['type'] }}"
#     /usr/bin/netctl disable "{{ item.value['type'] }}"
#     /usr/bin/netctl enable "{{ item.key }}"
#     /usr/bin/netctl start "{{ item.key }}"
#   async: 100
#   poll: 0
#   loop: "{{ niclist }}"
#   when: item != conn_interface
