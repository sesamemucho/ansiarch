---
- name: Print partition info
  ansible.builtin.debug:
    var: item

- name: Print partition xxx info
  ansible.builtin.debug:
    msg: "{{ item.value.flags|default([]) }}"

- name: Set device name
  ansible.builtin.set_fact:
    partition_name: "{{ use_luks|ternary('/dev/mapper/' ~ item.key, device_name ~ item.value.suffix) }}"
    force_fs: "{{ (disk_category == 'install_disks')|bool }}"

- name: Print other info
  ansible.builtin.debug:
    var:  force_fs

- name: Create partition
  community.general.parted:
    device: "{{ device_name }}"
    label: "{{ item.value.label }}"
    number: "{{ item.value.number }}"
    state: present
    flags: "{{ item.value.flags|default([]) }}"
    part_start: "{{ item.value.start }}"
    part_end: "{{ item.value.end }}"

- name: Initialize luks fact
  ansible.builtin.set_fact:
    have_root_luks: False

- name: Setup LUKS encryption
  block:
    - name: Setup LUKS encryption key
      ansible.builtin.copy:
        content: '{{ luks_key }}'
        dest: /root/keyfile
    - name: Destroy existing LUKS volume
      community.crypto.luks_device:
        device: '{{ device_name }}{{ item.value.suffix }}'
        state: absent
    - name: Create and open LUKS volume
      community.crypto.luks_device:
        device: '{{ device_name }}{{ item.value.suffix }}'
        keyfile: /root/keyfile
        name: '{{ item.key }}'
        state: opened
    - name: Remember luks
      ansible.builtin.set_fact:
        have_root_luks: True
      when: item.key == "root"

  when: use_luks

- name: Remember boot partition for later
  ansible.builtin.set_fact:
    boot_partition_name: "{{ partition_name }}"
  when: item.key == "boot"

- name: Create filesystem
  community.general.filesystem:
    dev: "{{ partition_name }}"
    fstype: "{{ item.value.fstype }}"
    force: "{{ force_fs }}"
    state: present

- name: Mount if not install_disks
  block:
  - name: Create mountpoint
    ansible.builtin.file:
      path: "{{ item.value.mount }}"
      state: directory

  - name: Mount filesystem
    ansible.posix.mount:
      path: "{{ item.value.mount }}"
      src: "{{ device_name }}{{ item.value.suffix }}"
      fstype: "{{ item.value.fstype }}"
      state: mounted
  when: disk_category != 'install_disks'
